基本概念：

高显存高级别显卡，高容量SSD，多核CPU 缺一不可

编译引擎约需要约500G不到的空间

由程序使用C++来开发核心的框架逻辑，并暴露一些参数及接口，策划创建由C++类继承的Blueprint，进行简单的参数配置或业务逻辑扩展，实现设计目标。通过这样的方式策划不需要会C++也能够从程序员的工作获利，并且在有微小改动的时候可以自行解决而不需要回头找程序修改底层代码。
Blueprint可以实现大部分C++的功能，甚至小型游戏可以完全通过Blueprint来实现，但对于大中型的游戏是不建议这样做的。

版本升级很快，有些插件只能特定版本和平台使用，需要调整适配API

GameMode深度适配FPS

没有专业的引擎和专业的gameplay程序出来的产品是可以玩，但是基本都是在5-6分阶段，专业引擎和专业gameplay的程序存在的意义是把5-6分阶段的产品打磨到8-9分，5-6分的产品可能花费30-40%的精力就行了，8-9分的打磨却要花费60-70%的精力

程序员如果不学好底层，将毫无作为。C++让你走向程序员这条路，编译原理和汇编语言等让你走得更好，数学英语让你走得更远。

性能/画质/功能特性不可能都要，找到平衡

你要靠自己,在一点点的摸索里,收获到:
1.如何在未知的领域找到一条可行的阶梯的经验和勇气
2.如何鉴别一份学习资料是否花时间看的判断力
3.为自己设计任务的主观能动性
4.亲自捉刀,从无到有构建一个完备逻辑的耐心和毅力
5.没有人为你兜底,你就是最后和最终责任人的觉悟

困难模式：

增量打包
美术资源渲染效果适配移动端
材质 渲染管线调整或扩展
2D游戏及界面类游戏
奔溃

Forward
For each light:
    For each object affected by the light: 
        framebuffer += object * light
前向渲染支持半透明渲染。光源数量对计算复杂度影响巨大,着色成本高，尤其在复杂场景中容易造成过绘制（Overdraw）。
适合低端设备 如移动平台游戏
一般会让每个物体受影响的光源有个上限比如3个或者4个
对需要深度和法线的后期处理算法不友好

Deferred
For each object:
    Render to multiple targets 
For each light:
    Apply light as a 2D postProcess
延迟渲染难处理透明的，对MSAA支持不友好。对大量光照支持好。每个像素只计算一次光照,仅与屏幕分辨率相关
G-Buffer占用大量显存，对带宽和硬件要求较高。
对需要深度和法线的后期处理算法友好

Forward+
foreach object in sceen
        get depth
foreach tile in screen:
        get max min depth
        Frustum  Intersection test
        Generate a list of light 
foreach pixel in screen:
    foreach light in light_list_of_this_tile:
        pixelLighting += light_contribution_to_pixel(light,pixel)
从AMD的论文Forward+: Bringing Deferred Lighting to the Next Level开始流行起来的
支持MSAA和透明，带宽小支持多光源

群组渲染（Clustered Rendering）
Clustered Forward Rendering ：在Forward+ Rendering的基础上又沿着相机深度的方向切了很多片
Clustered Deferred Rendering也即是在Tiled Deferred Rendering的基础上又沿着相机深度的方向上进行了切片


光照：
Lightmass （UE自己开发的）用于静态场景烘焙，Lumen 及 Nanite 处理动态光照。
Lightmass 会生成 三种 主要数据：Lightmap：光照贴图 Shadowmap：阴影贴图 Volumetric Lightmap：体积光照贴图，使用三阶球谐采样来捕捉所有方向的光，用于将间接光照应用于动态物体的数据集称为“体积光照”

光源移动性：
Static：运行时无法移动光源 静态类型光源会将它的直接光照，间接光照以及阴影，完全烘焙到光照贴图中。不能产生高光。
Stationary：保持固定位置不变的光源，运行游戏时可改变光源亮度颜色等，但不能移动光源位置。直接光照时延迟渲染的，可以运行时修改光源颜色和亮度。间接光照和间接阴影存储在光照贴图中，运行时不可改变。直接阴影在阴影贴图中，是距离场阴影。能产生高光。
Movable：完全动态的光照和阴影，运行时可调整。动态光源不会生成间接光照。能产生高光。

抗锯齿
TAA Temporal Anti-Aliasing：跨帧采样的时间累积算法，渲染管线中实时采样，融合多帧数据重建图像 支持延迟渲染 移动过快 会导致重影
FXAA Fast Approximate Anti-Aliasing：基于后处理的像素级模糊算法  渲染完成后全屏扫描 识别高对比度边缘进行平滑处理
MSAA Multisample Anti-Aliasing：在光栅化阶段，判断一个三角形是否被像素覆盖的时候计算三角形对子像素的覆盖情况，但计算颜色时只用像素中心坐标计算一次颜色，然后将着色结果乘以coverage的比例 只支持前向渲染
SSAA Super-Sample Anti-Aliasing:在渲染过程中对每个像素进行多次采样，然后对这些采样结果进行平均，以获得更平滑的边缘。SSAA的基本原理是提高渲染分辨率 ，然后将高分辨率图像缩小到目标分辨率。
DLSS: 需要硬件支持
Temporal Approximate Anti-Aliasing （TXAA）：TXAA是TAA和MSAA的结合，旨在利用两者的优势来提供更高质量的抗锯齿效果。它结合了TAA的时间采样和MSAA的空间采样。

阴影：
Shadow Map：渲染深度图，比较像素深度生成阴影。
传统的shadowmap的方式有两个缺陷：1. 锯齿；2. 自遮挡
Cascaded Shadow Maps：只能用于定向光源，如DirectionlLight。层级式阴影图，根据到摄像机的距离，将摄像机前面的空间分成多个层级，分别绘制各个层级的物体深度ShadowMap，合成一张连续的CSM阴影贴图，虚幻引擎的Far Shadow就是CSM中作为最后一层级渲染远处的阴影，距离可以很远。在Mobile管线上，默认需要先烘焙LightMap才能使用CSM Far Shadow
Dynamic Inset Shadow： 是 Unreal Engine 中的一项功能，旨在提高动态物体的阴影质量，尤其是在距离光源较远时。这一功能通过为每个动态物体单独绘制高质量的阴影来弥补传统阴影投射的精度损失。具体来说，当启用 Dynamic Inset Shadow 后，引擎会根据物体的边界框计算一个合适的投影分辨率，并在一张 PerObjectShadowAtlas 上绘制该物体的深度信息。这种方法允许每个物体拥有一个高分辨率的阴影贴图，从而在动态场景中提供更加细腻的阴影效果
Contact shadow：会 raymarching采样depthbuffer一段很小的距离，来补充shadowmap阴影效果。使用shadowmap阴影时，因为shadowmap需要覆盖足够大的范围，在近距离观察时，shadowmap的精度往往不够看，contact shadow是对近距离细节阴影的一个补充
Capsule Shadows：胶囊体阴影非常简单同时损耗很低，是用来渲染模型下方阴影的系统。当有大量角色运动时，如果使用具体的静态网格几何体，也就是角色自身的几何体来计算下方阴影，这样就需要跟踪并计算许多几何体。使用碰撞胶囊体来投射阴影，因为它们的面数要低得多，更容易投下阴影
Regular Dynamic shadows：动态阴影用于实时计算移动物体的阴影。
PerObjectShadow（Stationary Light Shadows）：适用于场景静态光源下绘制动态物体阴影，由于静态平行光源下的静态物体均可在离线状态下烘焙阴影到 Lightmap（Shadow mask），此时若使用 CSM 渲染余下的少量动态物体将会造成 Shadowmap 的浪费。使用逐物件阴影解决方案会得到比较显著的 GPU 性能提升。
Distance field shadows:Use DF info instead of tracing geometry
Virtual Shadow Maps设计就是用来提高阴影分辨率的 配合lumen natie worldpartition使用
阴影贴图光线追踪(Shadow Map Ray Tracing, SMRT):SMRT是UE5提出的结合VSM使用的阴影采样算法，用于替代传统阴影渲染中的PCF(Percentage Closer Filtering)/PCSS(Percentage Closer Soft Shadow)
SSAO：Screen Space Ambient Occasion屏幕空间环境遮挡，默认开启，动态ao，在PostProcessVolume里做调整，有Intensity和Radius两个属性。通过在屏幕像素的位置布置随机个采样点，然后通过采样点遮蔽项所占的百分比来计算阴影遮蔽强度。通常是在标准全局光照的基础上增添细微效果，例如让角落、裂缝或其他生物变暗，以形成一种更加自然真实的视觉效果。
DFAO：Distance Field Ambient Occlusion距离场环境遮挡，适合做开阔大场景的ao，默认关闭，动态ao
HBAO: Horizon Based Ambient Occlusion（基于水平环境光遮蔽）SSAO 通常只考虑屏幕空间中像素周围的局部深度信息来判断遮挡情况，而 HBAO 采用基于物理的算法，会对每个像素周围 360 度水平方向上的半球进行深度采样，能捕捉到屏幕外的遮挡物，从而更准确地模拟光线在场景中的传播和遮挡效果，减少了漏光和不自然的阴影现象，比如在一些有大面积遮挡物但不在屏幕中心的场景中，HBAO 能更好地表现出正确的阴影。

各向异性高光(Anisotropic highlighting)：高光天使环 Kajiya-Kay算法 是基于经验的着色模型，也就是并不是完全的着色物理正确。不过对于大多数硬件性能较低的平台也算够用
Marschner(siggraph03) Marschner模型是除Kajiya-Kay模型外另一个应用广泛的头发着色模型
Epic在Siggraph 2016 的Physically Based Hair Shading in Unreal发布了新一代的PBR毛发着色模型。将Marschner做了一些近似逼近，能realtime展现的比较好

substrate：满足BSDF材质的创建流程
Screen Space GI：屏幕空间全局照明(SSGI)是虚幻引擎的一项功能，旨在通过向屏幕视图内的对象添加动态间接光照来创建自然光照。利用SSGI，还可从自发光表面（例如霓虹灯或其他明亮表面）获得动态光照。目前，开启 SSGI 后将自动屏蔽 SSAO，与 SSGI 协同的 AO 无法通过面板进行调整（DFAO不受影响）

剔除:
Distance Culling/Frustum Culling/Precomputed Culling/Occlusion Culling
hierarchical Z-based occlusion/Software Occlusion Culling

Early-Z：是 GPU 硬件层面的优化技术，通过在片元着色器执行前提前进行深度测试，避免对被遮挡的像素进行无效计算 。顶点处理 → 光栅化 → Early-Z 深度测试 → 片元着色器 → 最终深度测试与混合
Z-pre pass：Prepass 是一种通过两次渲染来优化 Early-Z 的方法。第一次仅写入深度，第二次关闭深度写入并进行颜色渲染


减少DrawCall
Merge Actors/Instanced StaticMesh Rendering/Level of Detail/Hierarchical LOD （传统 LOD 仅根据距离切换单个物体的细节（如一棵树从高模变低模），但无法区分同一距离下不同类型物体的重要性。）
Lod一般每级降50%来抵消Mesh增加的消耗

反射：
Reflection Captures 本质上是捕获一张360度的图片，将它混合在模型上
Planar Reflections 平面反射是完全动态的，能显示场景中的任何改动。反射仅用于平滑表面，且在某些设置上可能损耗很大；但是非常适合需要精确反射效果的表面，也只在有限范围内起作用，适用于房间内的镜子而不是海面
Scene Space Reflections  唯一默认激活的反射系统，不需要预先计算；能实时反射所有对象；很准确但是有噪点，并且损耗很大；只会反射当前可见的内容。此效果不适合移动端开发。由于此效果依赖于法线 G 缓冲区 (Normals G-Buffer)，因此仅在延迟渲染路径中可用

Fog:
DistanceFog /HeighFog


命令：
r.shadowquality 0 共有 0 到 5 六个等级，0 没有动态阴影，5 最高质量动态阴影。
t.maxfps 调整最大帧率
Freezerendering 查看当前裁剪后需要渲染的对象
r.ForceLOD x 强制设置LOD级别

Lafortune ：经验性的反射模型，它使用了基于统计学的方法来描述物体表面的反射特性。该模型可以灵活地控制反射的各向同性和各向异性，并且能够很好地拟合各种不同的反射数据。（BRDF）公式为
Torrance-Sparrow ：一种基于微表面理论的反射模型 ，该模型能够很好地模拟金属等具有光泽表面的反射特性（BRDF）公式为
Ward anistropy：Ward 各向异性模型是一种用于描述各向异性表面反射的模型，它考虑了表面在不同方向上的反射特性不同，适用于模拟拉丝金属、头发等具有明显纹理方向的物体表面
Oren-Nayar：一种用于描述粗糙表面漫反射的模型，它考虑了表面微观结构对漫反射的影响，能够更真实地模拟粗糙表面的光照效果，如磨砂塑料、石头等
Cook-Torrance BRDF推导
函数D：法线分布函数(Normal Distribution Function)，其代表了所有微观角度下微小镜面法线的分布情况，粗糙表面法线分布相对均匀，光滑表面法线分布相对集中 (这种解释可能会有些抽象，后面会给出更加直观的物理上的解释)
函数G：几何函数(Geometry Function)，描述了微平面自遮挡的属性。当一个平面相对比较粗糙的时候，平面表面上的微平面有可能挡住其他的微平面从而减少表面所反射的光线。
函数F：菲涅尔方程(Fresnel Rquation)，描述了物体表面在不同入射光角度下反射光线所占的比率

Dot(点乘)：计算A,B之间的夹角映射到1到-1。当A,B的夹角等于90°时值为0;当夹角为0时值为1；
Cross(叉乘)：计算同时垂直于A,B的向量；

Lambert 总漫反射 = _反射系数 × 环境光ambient + _反射系数 × （顶点法向量N · 入射光反方向向量L)
Half Lambert 漫反射 = _反射系数 × 环境光 + _反射系数 × （顶点法向量 · 入射光反方向向量 * 0.5 + 0.5） 可以用偏移因子来替代取半
Phong 高光 =_镜面反射系数 × _光源强度 × （观察方向V · 反射光方向）^ 高光指数
Blinn-Phong 高光 = _镜面反射系数 × _光源强度 × （法线方向N · 视点方向和光源方向的半角向量V+L）^ 高光指数

Phong光照模型
I = Ia + Id * (N · L) + Is * (R · V)^shininess
（Ia为环境光，Id为漫反射，Is为镜面反射，N为法线，L为光方向，R为反射方向，V为视线方向，shininess为高光锐度）

Blinn-Phong光照模型
I = Ia + Id * (N · L) + Is * (N · H)^shininess
（H为半向量）

InteriorMapping 假室内效果


DirectLighting
	Specular：GGX Shading model
	Diffuse：IES/LightFunction
	Shadows：CSM/Dynamic shadows/Distance field shadows/Inset shadows/ PerObjectShadow/Contact shadows
Indirect
	Specular：Planar/Reflections Cap/SSR
	Diffuse：Lightmaps/Indirect Lighting cache
	Shadows：DFAO/SSAO/Capsule Shadows

粒子系统
Niagara：虚幻引擎的高级粒子系统工具，提供强大的粒子效果和模拟能力。
Cascade：传统的粒子系统工具，虽然Niagara在新版本中逐渐取代了它，但它仍然被用于一些项目中。

Nanite
虚拟化几何体：Nanite 是虚幻引擎5中的几何体虚拟化技术，使得开发者可以使用非常高分辨率的模型而无需担心传统的多边形限制。它自动处理细节层次（LOD），确保在各种距离下都能保持高质量的视觉效果。

Lumen
全局光照和反射系统：Lumen 是虚幻引擎5中的实时全局光照和反射系统，提供高质量的光照效果，并且能动态响应环境的变化。它取代了之前的光照系统（如Lightmass），提升了实时渲染的效果和灵活性。

MegaLights所采用的方案，基础是ReGir——通俗的说并不会每帧计算全部的灯光贡献，而是每次只采样总灯光数量中的很小一部分灯光来求解。然后通过帧间累积(或者加上空间复用）来逼近真实结果。

UMovieSceneSkeletalAnimationSystem  ECS构架 用于大规模计算
UMovieSceneSkeletalAnimationTrack 为动画序列轨道，轨道持有多个UMovieSceneSkeletalAnimationSection 片段，片段的FMovieSceneSkeletalAnimationParams Param字段持有动画序列数据UAnimSequenceBase
只要Track上有动画序列，Param的bool bForceCustomMode强制设置为true，在UMovieSceneSkeletalAnimationSystem的SetAnimPosition函数中会设置为自定义模式：Params.SkeletalMeshComponent->SetAnimationMode(EAnimationMode::AnimationCustomMode);

计算堆栈
SetAnimPosition(SetAnimPositionParams);
ApplyAnimations(SkeletalMeshComponent, InSkeletalAnimations.Animations);
EvaluateSkeletalAnimations

叠加动画融合
FAnimNode_MultiWayBlend& BlendNode = (PlayerState->bAdditive) ? AdditiveBlendNode : FullBodyBlendNode;

UAnimSequenceBase继承UAnimationAsset
UAnimSequence继承UAnimSequenceBase
UAnimMontage继承UAnimCompositeBase
UAnimCompositeBase继承UAnimSequenceBase

struct FAnimSequencerInstanceProxy : public FAnimInstanceProxy
class UMovieSceneSkeletalAnimationSystem : public UMovieSceneEntitySystem
struct FAnimSequencerInstanceProxy : public FAnimInstanceProxy

动画蓝图流程
1 UpdateData 一开始先通过UAnimInstance::UpdateAnimation在GameThread更新动画蓝图里面的变量，在UE5中增加了BlueprintSafeUpdate功能，可以在其他线程更新蓝图变量，减少主线程开销
2 UpdateAnimation 进入Task线程，通过FAnimInstanceProxy::UpdateAnimation求解动画蓝图中的节点，判断该使用哪些节点，以及节点在最终Pose中所占权重
3 EvaluateAnimation 依然在Task线程，此时已确定了要执行哪些节点，通过FAnimInstanceProxy::EvaluateAnimation根据节点计算好了每根骨骼的最终Transform
4 AnimationCompletion 回到GameThread，根据计算好的骨骼Transform修改Component Pose，并且执行触发的AnimNotify

TObjectPtr：当指向 UObject 类型，并且需要交给 UE 的垃圾回收系统管理时。常用于组件、Actor 等对象。 
TSharedPtr：当多个对象需要共享数据时，用于管理非 UObject 的生命周期。 
TWeakPtr：当需要避免循环引用，或访问但不控制对象的生命周期时。

RAII（Resource Acquisition Is Initialization）的核心思想 ：资源获取：在对象的构造函数中获取资源（文件句柄，网络链接等）；资源释放：在对象的析构函数中释放资源；通过此种方式避免资源泄露和未释放问题。

智能指针：将基本类型指针封装为类对象指针（这个类肯定是个模板，以适应不同基本类型的需求），并在析构函数里编写delete语句删除指针指向的内存空间

Plain Old Data: C++定义的和C相兼容的数据结构 。没有构造函数，析构函数，复制赋值操作符，没有虚函数，虚基类。所有非静态成员都应该是public和pod类型。

g++ 和 gcc：均属于 GNU Compiler Collection（GCC）套件。gcc 是 GCC 中用于编译 C 语言的编译器，g++ 则用于编译 C++ 语言。GCC 是开源编译器，可在多种操作系统上使用，如 Linux、macOS、Windows（通过 MinGW 或 Cygwin）等。
clang：是 LLVM（Low Level Virtual Machine）项目的一部分，同样是开源编译器，支持多种平台，包括 Linux、macOS、Windows 等。在 macOS 上，它是默认的编译器。
MSVC：即 Microsoft Visual C++，是微软开发的闭源编译器，主要用于 Windows 平台，是 Visual Studio 集成开发环境（IDE）的一部分。

deleted 函数不能以任何方式被调用，即使你在成员函数或者友元函数里面调用 deleted 函数也不能通过编译

在 32 位操作系统中，地址空间为 2^32 个不同的地址，这意味着需要 32 位（即 4 字节）来表示一个内存地址。因此，在 32 位操作系统中，无论指针指向何种数据类型，其大小通常为 4 字节
在 64 位操作系统中，地址空间为 2^64 个不同的地址，需要 64 位（即 8 字节）来表示一个内存地址。所以，在 64 位操作系统中，指针的大小通常为 8 字节

在 Linux 内核里，list_head 是一种非常关键的数据结构，它实现了一个双向循环链表。这种链表设计十分巧妙，它不存储数据，仅仅作为链表节点的连接件，这样就能把不同类型的数据结构串起来。


为了以后美术不装visualstudio编译代码，直接从编译好的环境启动工程。望大家按照下面流程提交c++修改。（仅供修改c++同学注意）
1.如果修改了C++需提交Binaries目录，其下包含三种类型文件.modules/.dll/.pdb都提交，当然也包括c++代码。
2.必须保持整个工程中所有.modules文件中buildid是一致的。否则将提示The following modules are missing or built with a different engine version
3.不要提交Intermediate目录。

// Base class of reflection data objects.
class UField : public UObject  
// Base class for all UObject types that contain fields.
class UStruct : public UField
// An object class
class UClass : public UStruct
//Reflection data for a standalone structure declared in a header or as a user defined struct
class UScriptStruct : public UStruct
// Reflection data for a replicated or Kismet callable function.
class UFunction : public UStruct
// Function definition used by dynamic delegate declarations
class UDelegateFunction : public UFunction
// Reflection data for an enumeration.
class UEnum : public UField
//
class UProperty : public UField

class UObjectBase
{
friend struct Z_Construct_UClass_UObject_Statics
}
Z_Construct_UClass_UObject_Statics在LearnCode\Intermediate\Build\Win64\LearnCode\Inc\CoreUObject\UHT\NoExportTypes.gen.cpp


Camera Angles:
Low-angle shot.  低角度拍摄
High-angle shot 高角度镜头
Eye-level shot 平视镜头
Bird’s-eye view 鸟瞰视角 俯拍镜头
Dutch angle 荷兰角。通常，摄影机与地面或地平线平行放置；然而，荷兰角，也称为斜拍或倾斜镜头，会将视角倾斜，使摄影机与地平线成斜角——此时图像呈对角线。荷兰角暗示着不稳定、危险、陌生和悬念。你经常会在恐怖片和悬疑片中看到它们，或者在人物经历生理或心理变化的场景中
Over-the-shoulder. 过肩镜头。过肩镜头（OTS）是一种极为常见的镜头，用于拍摄两位演员的对话。距离摄像机最近的演员被称为前景演员，或舞台前方的演员；该演员背对摄像机（看不到他的脸），镜头中会包含他的肩膀。面向摄像机（也是镜头的主要主体）的演员被称为舞台后方演员，镜头中会出现一个中景或特写镜头。OTS镜头非常重要，因为它可以通过在一个镜头中将两个角色联系起来，从而建立他们之间的关系（包括身体和情感方面）。OTS镜头适用于双人对话场景；但务必确保拍摄双方（越过每个演员的肩膀）。当你从OTS演员A向演员B拍摄时，然后转身从OTS演员B向演员A拍摄时，这被称为反打镜头，

标准的特写（close-up，CU）镜头包括被摄对象的头部和肩部 最早由导演格里菲斯等人创造，用来拍摄人像的面部，人体的某一局部，物品的某一细节
七分身镜头（Cowboy Shot)，又称牛仔，来源于全盛时期的好莱坞西部片，镜头的画面一般涵盖从人的头顶直到膝盖的位置，也就是七分身，像极了西部片中对牛仔形象刻画，从头到配枪的腰身
ExtremeCloseUp而大特写镜头（extreme close-up，ECU）则更紧，如只摄取眼睛或嘴唇等 Extreme Close Up Shot 特写 对人物主体的部分进行特写来填充画面，用于极端情绪的表达。而只针对于眼部的特写镜头有时候也被称为“Italian Shot”。。
中景镜头（Medium Shoot），画框下边卡在膝盖左右部位或场景局部的画面称为中景画面，中景镜头所包容的景物比全景少，比特写多，环境处于次要地位，重点在于表现人物的上身动作，在影视作品中中景镜头的比重较大，因为镜头的叙事性较强。
Full Shot 全景 画面中主体完整（从头到脚）的填充画面，一般用以表现运动和环境。




蒙特卡洛积分(Monte Carlo Integration)  对函数值进行多次采样求均值作为积分值的近似



IMR（立即渲染模式）每个渲染命令立即执行，直接写入帧缓冲 NVIDIA 早期 Tegra 系列 架构简单但带宽消耗高，移动端已被淘汰
TBR（分块渲染） 将画面分割为 Tile，先缓存几何数据再统一渲染。ARM Mali Bifrost、高通 Adreno 部分型号。减少片外内存访问，带宽需求降低 50% 以上
TBDR（分块延迟渲染）在 TBR 基础上增加 HSR（隐藏面消除），提前剔除不可见像素 Imagination PowerVR 系列 通过硬件加速深度测试，Overdraw 可控制在屏幕像素的 1.2 倍以内

PowerVR 的 TBDR 架构在带宽节省上的优势，HSR 技术的剔除率。
ARM Mali Bifrost 的多线程性能和 ASTC 纹理压缩。
Qualcomm Adreno 的驱动优化和硬件光追支持。
Imagination 的 DXT 架构增强了光线追踪，适用于主流设备。


Rider&Unreal HotKey


Alt+O 切换h和cpp文件
Alt+\ 搜索当前文件的函数
Alt + Home 跳转到父类方法 
Ctrl+Alt+Enter 格式化代码
Shift + F12 查找当前光标下类型或变量被使用的地方
Ctrl + E, H 打开当前光标下类型的继承关系面板
Ctrl + Tab	切换打开的文件 	
跳转到定义和实现 1.F12 2.按住Ctrl + 左键单击 3.中键单击
搜索 Shift + Shift
打开当前光标所在代码的上下文菜单：Alt + Enter

Typing
dazidazi.com
https://www.edclub.com/sportal/program-3.game
https://typing.io/
https://www.keybr.com/
https://www.ratatype.com/
https://www.kidztype.com/typing-web/symbol-lesson-1_3fdc70d14.html
https://www.monkey-type.org/


https://wiki.libsdl.org/SDL3/CategoryGPU
https://www.sfml-dev.org/

ui
https://github.com/chromiumembedded

脚本
https://angelscript.hazelight.se/
https://github.com/Tencent/puerts
https://github.com/Tencent/UnLua

算法
https://visualgo.net/en


GameEngine
https://github.com/ValveSoftware/source-sdk-2013

Games101(现代计算机图形学入门） https://www.bilibili.com/video/BV1X7411F744/?spm_id_from=333.999.0.0&vd_source=6225fe1ef97787e588c1e695ddad681d  
科大出品的数字几何处理-中国科学技术大学-傅孝明
GAMES201：高级物理引擎实战指南2020
 虎书 Fundamentals of Computer Graphics. Shirley
OpenGL programming Guide
实时渲染深入探究：https://dev.epicgames.com/community/learning/courses/ML7/unreal-engine-08227c/bLyn/unreal-engine-822b4d
SIGGRAPH：https://kesen.realtimerendering.com/
基于图像的游戏AI自动化框架 https://github.com/Tencent/GameAISDK
Optimal Reciprocal Collision Avoidance in Three Dimensions (C++) https://github.com/snape/rvo2-3d
Build smaller, faster, and more secure desktop and mobile applications with a web frontend. https://github.com/tauri-apps/tauri
A Node.js binding to webview https://github.com/Winterreisender/webview-nodejs
Build GUI for your Python program with JavaScript, HTML, and CSS. https://pywebview.flowrl.com/
unity技能编辑器，Buff编辑器，场景编辑器 https://github.com/NoBugCn/ActionEditor
通用UGUI系统 https://github.com/Skierhou/UISystem
通用的游戏任务系统 https://github.com/Skierhou/TaskSystem
南方科技大学c++ https://www.bilibili.com/video/BV1Vf4y1P7pq?spm_id_from=333.788.videopod.episodes&vd_source=6225fe1ef97787e588c1e695ddad681d
DX11 https://www.cnblogs.com/X-Jun/tag/DirectX%2011/
c++基础大全 https://github.com/Light-City/CPlusPlusThings  / https://github.com/TheAlgorithms/C   / https://github.com/TheAlgorithms/C-Plus-Plus

UE游戏：
《和平精英》《战双帕弥什》《鸿图之下》《全民奇迹2》《实况足球》《黑神话》《鸣潮》《幻塔》 《霍格沃茨之遗》《三角洲》

游戏列表：
荒野大镖客2
最后生还者1/2
巫师3
战神4/5
神秘海域4
底特律变人
对马岛之魂
黑神话
极限竞速 地平线5
地铁：离去
古墓丽影
GTA5
ALANWAK1/2
PlayDay2
DeathStanding
BioShock
Borderlands3
MaFIA
WatchDog2
生化危机4：重制版
女神异闻录5
血源
剑星
赛博朋克2077 
刺客信条 幻境 奥德赛 英灵殿
孤岛惊魂6
蜘蛛侠
碧蓝幻想 Relink
只狼：影逝二度
霍格沃茨之遗
瘟疫传说1/2

寂静岭2
直到黎明
博德之门
艾尔登法环
浪人崛起
